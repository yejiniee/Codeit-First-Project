name: Run Lighthouse CI (Push on PR to main branch)
on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

permissions:
  contents: read
  pull-requests: write

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22.13.1
        uses: actions/setup-node@v4
        with:
          node-version: 22.13.1

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install packages
        run: |
          npm install

      - name: Build
        run: |
          npm run build

      - name: Run Lighthouse CI for Desktop
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli
          lhci collect --config=.lighthouserc-desktop.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'
          lhci upload --config=.lighthouserc-desktop.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'

      - name: Run Lighthouse CI for Mobile
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          lhci collect --config=.lighthouserc-mobile.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'
          lhci upload --config=.lighthouserc-mobile.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |

            const fs = require('fs');
            const path = require('path'); 
            const { getLhciPageNameFromUrl, LHCI_GREEN_MIN_SCORE, LHCI_ORANGE_MIN_SCORE, LHCI_RED_MIN_SCORE } = require('./src/configs/lighthouse/Lighthouse.js');

            const reportDir = path.resolve('.lighthouseci');
            const files = fs.readdirSync(reportDir);
            const jsonFiles = files.filter(file => file.endsWith('.json'));

            const getColor = (score) => {
              if (score >= LHCI_GREEN_MIN_SCORE) return 'ðŸŸ¢';
              else if (score >= LHCI_ORANGE_MIN_SCORE) return 'ðŸŸ ';
              return 'ðŸ”´';
            }

            const getAuditColorAndScore = (score) => getColor(score) + score;
            const getPerformanceMetricColorAndScore = (category) => getColor(category.score * 100) + category.displayValue;

            const formatResult = (res) => Math.round(res * 100);

            const desktopResults = jsonFiles
              .filter(file => file.toLowerCase().includes('desktop'))
              .map(file => {
                const jsonPath = path.join(reportDir, file);
                const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
                return { ...data, jsonPath };
              });

            const mobileResults = jsonFiles
              .filter(file => file.toLowerCase().includes('mobile'))
              .map(file => {
                const jsonPath = path.join(reportDir, file);
                const data = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
                return { ...data, jsonPath };
              });

            const monitoringTime = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });
            const scoreDescription = `> ðŸŸ¢: ${LHCI_GREEN_MIN_SCORE} - 100` + ' / ' + `ðŸŸ : ${LHCI_ORANGE_MIN_SCORE} - ${LHCI_GREEN_MIN_SCORE - 1}` + ' / ' + `ðŸ”´: ${LHCI_RED_MIN_SCORE} - ${LHCI_ORANGE_MIN_SCORE - 1}`;
            let comments = '';

            comments += `### Lighthouse report âœ¨\n`;
            comments += `${scoreDescription}\n\n`;

            const scores = { desktop: {}, mobile: {} };

            const extractLhciResults = (results, device) => {
              comments += `#### ${device}\n\n`;

              results.forEach((result) => {
                const { url, summary, jsonPath } = result;
                const { audits } = JSON.parse(fs.readFileSync(jsonPath));

                const pageUrl = url.replace('http://localhost:3000', '');
                const pageName = getLhciPageNameFromUrl(pageUrl);

                Object.keys(summary).forEach((key) => (summary[key] = formatResult(summary[key])));

                const { performance, accessibility, 'best-practices': bestPractices, seo, pwa } = summary;
                const { 'first-contentful-paint': firstContentfulPaint, 'largest-contentful-paint': largestContentfulPaint, 'speed-index': speedIndex, 'total-blocking-time': totalBlockingTime, 'cumulative-layout-shift': cumulativeLayoutShift } = audits;

                const formattedScoreTable = [
                  `| Category | Score |`,
                  `| --- | --- |`,
                  `| ${getColor(performance)} Performance | ${performance} |`,
                  `| ${getColor(accessibility)} Accessibility | ${accessibility} |`,
                  `| ${getColor(bestPractices)} Best practices | ${bestPractices} |`,
                  `| ${getColor(seo)} SEO | ${seo} |`,
                  `| ${getColor(pwa)} PWA | ${pwa} |`,
                  `| ${getColor(firstContentfulPaint.score * 100)} First Contentful Paint | ${firstContentfulPaint.displayValue} |`,
                  `| ${getColor(largestContentfulPaint.score * 100)} Largest Contentful Paint | ${largestContentfulPaint.displayValue} |`,
                  `| ${getColor(speedIndex.score * 100)} Speed Index | ${speedIndex.displayValue} |`,
                  `| ${getColor(totalBlockingTime.score * 100)} Total Blocking Time | ${totalBlockingTime.displayValue} |`,
                  `| ${getColor(cumulativeLayoutShift.score * 100)} Cumulative Layout Shift | ${cumulativeLayoutShift.displayValue} |`,
                  `\n`,
                ].join('\n');

                const score = {
                  Performance: getAuditColorAndScore(performance),
                  Accessibility: getAuditColorAndScore(accessibility),
                  'Best Practices': getAuditColorAndScore(bestPractices),
                  SEO: getAuditColorAndScore(seo),
                  PWA: getAuditColorAndScore(pwa),
                  FCP: getPerformanceMetricColorAndScore(firstContentfulPaint),
                  LCP: getPerformanceMetricColorAndScore(largestContentfulPaint),
                  'Speed Index': getPerformanceMetricColorAndScore(speedIndex),
                  'TBT': getPerformanceMetricColorAndScore(totalBlockingTime),
                  'CLS': getPerformanceMetricColorAndScore(cumulativeLayoutShift),
                }
                
                scores[device][pageName] = score;

                comments += `<details>\n<summary>${pageName}</summary>\n\n> ${pageUrl}\n\n${formattedScoreTable}\n</details>\n\n`;
              });
            } 

            extractLhciResults(desktopResults, 'desktop');
            extractLhciResults(mobileResults, 'mobile');

            core.setOutput('comments', comments);            
            core.setOutput('monitoringTime', monitoringTime);
            core.setOutput('scores', scores);

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, payload } = context;

            const { data: previousComments } = await github.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: payload.pull_request.number,
            });

            const previousLHCIComment = previousComments.find((comment) => (comment.body.startsWith(`### Lighthouse report âœ¨\n`)));
            const newComment = `${{ steps.format_lighthouse_score.outputs.comments }}`;

            if (previousLHCIComment) {
              await octokit.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: previousLHCIComment.id, 
                body: newComment, 
              });
            } else { 
              await octokit.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: payload.pull_request.number,
                body: newComment,
              });
            }

      - name: Update Google SpreadSheet
        uses: actions/github-script@v7
        with:
          script: |

            const fs = require('fs');
            const { GoogleSpreadsheet } = require('google-spreadsheet');
            const { LHCI_GOOGLE_SPREAD_SHEET_ID, getLhciSheetIdFromPageName } = require('./src/configs/lighthouse/Lighthouse.js');

            const updateGoogleSheet = async () => {
              const creds = {
                client_email: `${{ secrets.LHCI_GOOGLE_CLIENT_EMAIL }}`, 
                private_key: `${{ secrets.LHCI_GOOGLE_PRIVATE_KEY }}`, 
              };

              const { desktop, mobile } = ${{ steps.format_lighthouse_score.outputs.scores }};
              const monitoringTime = `${{ steps.format_lighthouse_score.outputs.monitoringTime }}`;

              const { repo, payload } = context;

              const doc = new GoogleSpreadsheet(LHCI_GOOGLE_SPREAD_SHEET_ID); 
              await doc.useServiceAccountAuth(creds);
              await doc.loadInfo();

              for (const pageName in desktop) {
                const sheetId = getLhciSheetIdFromPageName(pageName);
                const desktopScore = desktop[pageName];
                const mobileScore = mobile[pageName];

                const sheet = doc.sheetsById[sheetId];
                await sheet.loadHeaderRow();

                const prUrl = `https://github.com/${repo.owner}/${repo.repo}/pull/${payload.pull_request.number}`;
                const prHyperlink = '=HYPERLINK("' + prUrl + '", "#' + payload.pull_request.number + '")';

                const rows = await sheet.getRows(); 
                const previousRow = rows.find((row) => row['PR url'] === `#${payload.pull_request.number}`);

                if (previousRow) { 
                  previousRow['Monitoring Time'] = monitoringTime;
                  previousRow['PR url'] = prHyperlink;
                  Object.keys(desktopScore).forEach((key) => {
                    previousRow[key + ' [D]'] = desktopScore[key];
                    previousRow[key + ' [M]'] = mobileScore[key];
                  });

                  await previousRow.save();
                  continue;
                } 

                const newRow = { 'PR url': prHyperlink, 'Monitoring Time': monitoringTime };
                Object.keys(desktopScore).forEach((key) => {
                    newRow[key + ' [D]'] = desktopScore[key];
                    newRow[key + ' [M]'] = mobileScore[key];
                  });

                await sheet.addRow(newRow);
              } 
            }

            updateGoogleSheet().catch(err => core.setFailed(err.message));
